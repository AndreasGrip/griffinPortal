doctype html
html
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible' content='IE=edge')
    title WebAdmin
    // Tell the browser to be responsive to screen width
    meta(content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport')
    
    script.
      let filesToLoad = 0;
      const filesLoaded = [];
      const filesLoadedTriggers = []; // [{ files: ['/file.js'], functions : [function () {}] }]
      const filesFailedToLoad = [];


      const runAfterloadfile =  []; // array of functions to run after js/css files are loaded using loadfile
      // Andreas Grip REALLY hates the behavior to add javascript at the end of HTML ot add it after the page is created.
      // loadfile is his attempt to remove the need of such behavior, as as a perk use the same function to load css files.
      function loadfile(filename) {
        let done = false;
        const filetype = filename.match(/\.js/i) ? 'js' : filename.match(/\.css/i) ? 'css' : 'unknown';
        if (filetype === 'unknown') return;
        filesToLoad++;
        const head = document.getElementsByTagName('head')[0];
        const fileref = document.createElement(filetype === 'js' ? 'script' : 'link');
        fileref.onload = handleLoaded;
        fileref.onerror = handleFailedToLoad;

        function handleLoaded() {
          if(!done) {
            filesLoaded.push(this.attributes.href ? this.attributes.href.nodeValue : this.attributes.src.nodeValue);
            done = true;
            filesToLoad--;
            if(filesToLoad === 0) filesToLoadEmpty();
          }
        }

        function handleFailedToLoad() {
          if(!done) {
            filesFailedToLoad.push(this.attributes.href ? this.attributes.href.nodeValue : this.attributes.src.nodeValue);
            done = true;
            filesToLoad--;
            if(filesToLoad === 0) filesToLoadEmpty();
          }
        }

        function filesToLoadEmpty() {
          if(runAfterloadfile && Array.isArray(runAfterloadfile) && runAfterloadfile.length > 0) {
            runAfterloadfile.forEach(element => {
              element();
            })
          }
        }

        fileref.onreadystatechange = function () {
          if(fileref.readyState == "loaded" || fileref.readyState === "complete") handleLoaded();
        }
        if (filetype === 'css') fileref.setAttribute('rel', 'stylesheet');
        fileref.setAttribute('type', filetype === 'js' ? 'text/javascript' : 'text/css');
        fileref.setAttribute(filetype === 'js' ? 'src' : 'href', filename);
        if (filetype === 'js') {
          window.addEventListener('DOMContentLoaded', () => {
            head.appendChild(fileref);
          });
        } else {
          head.appendChild(fileref);
        }
        console.log('Loaded ' + filename);
      }; // end of loadfile

      loadfile('/node_modules/bootstrap/dist/css/bootstrap.min.css');
      //loadfile('/node_modules/%40fortawesome/fontawesome-free/css/all.min.css');
                
      loadfile('/node_modules/line-awesome/dist/font-awesome-line-awesome/css/all.min.css');
      
      loadfile('/node_modules/js-datepicker/dist/datepicker.min.js');
      loadfile('/node_modules/js-datepicker/dist/datepicker.min.css');
      
      
      // Have this last to overwrite all previous js/css
      loadfile('/stylesheets/template.css');
      loadfile('/javascripts/template.js');


      function sidebarUpdate() {
        // if all files are not yet loaded wait another 50ms before trying again.
        if(filesToLoad > 0) {
          setTimeout(sidebarUpdate, 50);
          return;
        }
        function successFunk(data) {
          const menu = document.getElementById('siteMenu')
          for (let menurow of data) {
            const menuItem = document.createElement('a');
            menuItem.href = menurow.URL;
            menuItem['area-current']="page";
            menuItem.classList.add('nav-link');
            const menuIcon = createFaIcon(menurow.icon);
            const menuText = oneLineTag('span', {innerHTML: menurow.description});
            menuItem.appendChild(menuIcon);
            menuItem.appendChild(menuText);
            menu.appendChild(menuItem);
          }
        }
        getData('/sidebar', successFunk, noOp);
      }

      window.addEventListener('DOMContentLoaded', () => {
        sidebarUpdate()
      })

      window.addEventListener('load', (event) => {
        document.body.style.display = ''
      })

      function getData2Store(url, storeAs, runAfterAll) {
        filesToLoad++;
        const onSuccess = function(data) {
          const store  = storeDatafunction(storeAs);
          store(data);
        }
        const runafter = function () {
          filesToLoad--;
          if(filesToLoad <= 0) {
            runAfterAll();
          }
        }
        getData(url, onSuccess , runafter);
      }

    title WebAdmin
  body(style='display:none')
    main 
      horizontalbar.header
        a.logo(href='/')
          span.menu-Title WebAdmin
        nav.navbar.settingsNav 
          span.nav 
            .profileMenu 
              button#settingsBtn.btn.btn-default Settings
              #settingsMenu.menu-dropdown
                a.dropdown-item(href="/logout") Logout
      verticalbar.d-flex.flex-column.text-white.bg-dark 
        ul#siteMenu.nav.flex-column.mb-auto 
        .b-example-divider 
        hr
        .b-example-divider 
      horizontalbar.footer.d-flex-bd.bd-highlight 
        span.p-2.flex-grow-1.bd-highlight Created by Andreas Grip All rights reserved.
        span.p-2.bd-highlight Version 1.0
      content
        block content